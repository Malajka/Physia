import fetchWithTimeout from "@/lib/utils/http-client";
import {
  DEFAULT_REST_TIME_SECONDS,
  HIGH_PAIN_THRESHOLD,
  MAX_PLAN_EXERCISES,
  MAX_TEST_EXERCISES,
  MEDIUM_PAIN_THRESHOLD,
  OPENROUTER_TIMEOUT_MS,
  USE_MOCK_DATA,
} from "@/lib/services/training-plan/constants";
import { buildTrainingPlanPrompt } from "@/lib/services/training-plan/prompt-builder";
import type { ExerciseDto, MuscleTestDto } from "@/types";
import { z } from "zod";

/**
 * Interface for OpenRouter API request
 */
interface OpenRouterRequest {
  model: string;
  messages: { role: "system" | "user" | "assistant"; content: string }[];
  max_tokens: number;
  temperature: number;
  stream?: boolean;
  headers?: Record<string, string>;
}

/**
 * Schema for validating the training plan JSON generated by OpenRouter
 */
export const TrainingPlanSchema = z.object({
  title: z.string(),
  description: z.string(),
  warnings: z.array(z.string()).optional(),
  exercises: z.array(
    z.object({
      id: z.number(),
      name: z.string(),
      description: z.string(),
      sets: z.number().int().positive(),
      reps: z.number().int().positive(),
      rest_time_seconds: z.number().int().nonnegative(),
      notes: z.string().optional(),
    })
  ),
});

export type TrainingPlan = z.infer<typeof TrainingPlanSchema>;

/**
 * Extracts the JSON object substring from AI response.
 */
function extractJson(content: string): string | null {
  const match = content.match(/\{[\s\S]*\}/);
  return match ? match[0] : null;
}

/**
 * Validates parsed data against the TrainingPlan schema.
 */
function validatePlan(parsed: unknown): TrainingPlan {
  const result = TrainingPlanSchema.safeParse(parsed);
  if (!result.success) {
    throw new Error(`Training plan validation failed: ${result.error.message}`);
  }
  return result.data;
}

/**
 * Calculates sets and reps based on pain intensity thresholds.
 */
function calculateSetsReps(painLevel: number): { sets: number; reps: number } {
  if (painLevel >= HIGH_PAIN_THRESHOLD) {
    return { sets: 2, reps: 8 };
  } else if (painLevel >= MEDIUM_PAIN_THRESHOLD) {
    return { sets: 3, reps: 10 };
  }
  return { sets: 3, reps: 12 };
}

/**
 * Generates a mock training plan for development.
 */
function generateMockTrainingPlan(
  bodyPartName: string,
  muscleTests: (MuscleTestDto & { pain_intensity: number })[],
  exercises: ExerciseDto[]
): TrainingPlan {
  // Sort tests by descending pain intensity
  const sortedTests = [...muscleTests].sort((a, b) => b.pain_intensity - a.pain_intensity);
  const selected: ExerciseDto[] = [];

  for (const test of sortedTests) {
    const related = exercises.filter((ex) => ex.muscle_test_id === test.id);
    const takeCount = Math.min(related.length, MAX_TEST_EXERCISES);
    for (let i = 0; i < takeCount && selected.length < MAX_PLAN_EXERCISES; i++) {
      selected.push(related[i]);
    }
    if (selected.length >= MAX_PLAN_EXERCISES) break;
  }

  return {
    title: `${bodyPartName} Recovery Plan`,
    description: `A personalized training plan to address pain in the ${bodyPartName} area, focusing on strength and mobility.`,
    warnings: ["Discontinue any exercise that causes sharp pain", "Consult with a healthcare professional if symptoms worsen"],
    exercises: selected.map((ex) => {
      const test = muscleTests.find((t) => t.id === ex.muscle_test_id);
      const pain = test?.pain_intensity ?? 5;
      const { sets, reps } = calculateSetsReps(pain);
      return {
        id: ex.id,
        name: `Exercise for ${test?.name || "Muscle"}`,
        description: ex.description,
        sets,
        reps,
        rest_time_seconds: DEFAULT_REST_TIME_SECONDS,
        notes: pain >= HIGH_PAIN_THRESHOLD ? "Perform with caution due to high pain level" : undefined,
      };
    }),
  };
}

/**
 * Orchestrates the generation of a training plan, using mock or real API.
 */
export async function generateTrainingPlan(
  bodyPartName: string,
  muscleTests: (MuscleTestDto & { pain_intensity: number })[],
  exercises: ExerciseDto[]
): Promise<{ trainingPlan: TrainingPlan | null; error: string | null }> {
  // Ensure inputs
  if (muscleTests.length === 0 || exercises.length === 0) {
    return { trainingPlan: null, error: "No muscle tests or exercises provided" };
  }
  // Development mode
  if (USE_MOCK_DATA) {
    const mockPlan = generateMockTrainingPlan(bodyPartName, muscleTests, exercises);
    return { trainingPlan: mockPlan, error: null };
  }
  // Validate API key
  const apiKey = import.meta.env.OPENROUTER_API_KEY;
  if (!apiKey) {
    return { trainingPlan: null, error: "OpenRouter API key not configured" };
  }
  // Build prompt
  const aiPrompt = buildTrainingPlanPrompt(bodyPartName, muscleTests, exercises);
  const payload: OpenRouterRequest = {
    model: "openai/gpt-3.5-turbo",
    messages: [
      { role: "system", content: "You are an AI physiotherapy assistant specialized in creating personalized training plans." },
      { role: "user", content: aiPrompt },
    ],
    max_tokens: 2000,
    temperature: 0.2,
    headers: {
      "HTTP-Referer": "https://physia.app",
      "X-Title": "Physia Exercise Plan Generator",
    },
  };

  // Call API with timeout
  let response: Response;
  try {
    response = await fetchWithTimeout(
      "https://openrouter.ai/api/v1/chat/completions",
      { method: "POST", headers: { "Content-Type": "application/json", Authorization: `Bearer ${apiKey}` }, body: JSON.stringify(payload) },
      OPENROUTER_TIMEOUT_MS
    );
  } catch (err: unknown) {
    if (err instanceof DOMException && err.name === "AbortError") {
      return { trainingPlan: null, error: `OpenRouter API request timed out after ${OPENROUTER_TIMEOUT_MS / 1000} seconds` };
    }
    return { trainingPlan: null, error: `Error generating training plan: ${err instanceof Error ? err.message : String(err)}` };
  }

  if (!response.ok) {
    const errData = await response.json();
    return { trainingPlan: null, error: `OpenRouter API error: ${errData.error?.message || response.statusText}` };
  }
  const result = await response.json();
  const content = result.choices?.[0]?.message?.content;
  if (!content) {
    return { trainingPlan: null, error: "No content generated by OpenRouter" };
  }
  const jsonString = extractJson(content);
  if (!jsonString) {
    return { trainingPlan: null, error: "Generated content does not contain valid JSON" };
  }
  let parsed: unknown;
  try {
    parsed = JSON.parse(jsonString);
  } catch (e: unknown) {
    return { trainingPlan: null, error: `Failed to parse training plan: ${e instanceof Error ? e.message : String(e)}` };
  }
  try {
    const plan = validatePlan(parsed);
    return { trainingPlan: plan, error: null };
  } catch (e: unknown) {
    return { trainingPlan: null, error: e instanceof Error ? e.message : String(e) };
  }
}
