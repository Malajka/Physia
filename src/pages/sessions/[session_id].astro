---
import { FeedbackRating } from "@/components/session/FeedbackRating";
import { TrainingPlanDisplay } from "@/components/session/TrainingPlanDisplay";
import Layout from "@/layouts/Layout.astro";
import type { TrainingPlan } from "@/lib/services/training-plan";


// Server-side guard: require authenticated session and disclaimer acceptance
const authRes = await Astro.locals.supabase.auth.getSession();
const session = authRes.data.session;
if (!session) {
  return Astro.redirect("/login");
}
if (!session.user.user_metadata?.disclaimer_accepted_at) {
  return Astro.redirect("/body-parts");
}

// Grab the session_id from the route params
const sessionId = Number(Astro.params.session_id);
const pageTitle = `Session ${sessionId}`;
// Initialize session data variables
let sessionError: string | null = null;
let trainingSession: { training_plan: TrainingPlan } | null = null;

// Fetch session details for the authenticated user
const supabase = Astro.locals.supabase;
const { data: sessionRow, error: fetchError } = await supabase
  .from("sessions")
  .select("training_plan")
  .eq("id", sessionId)
  .eq("user_id", session.user.id)
  .single();
if (fetchError || !sessionRow) {
  // Not found or not owned by user
  return Astro.redirect("/sessions");
}
trainingSession = { training_plan: sessionRow.training_plan as TrainingPlan };

// Add exercise image fetching
let exerciseImagesMap: Record<number, { file_path: string; metadata: unknown }[]> = {};
if (trainingSession) {
  const exerciseIds = trainingSession.training_plan.exercises.map((ex) => ex.id);
  const { data: exercisesData, error: exercisesError } = await supabase
    .from("exercises")
    .select("id, exercise_images(file_path, metadata)")
    .in("id", exerciseIds);
  if (!exercisesError && exercisesData) {
    exerciseImagesMap = exercisesData.reduce(
      (acc, item) => {
        acc[item.id] = item.exercise_images;
        return acc;
      },
      {} as Record<number, { file_path: string; metadata: unknown }[]>
    );
  }
}
---

<Layout title={pageTitle}>
  <div class="min-h-screen bg-gradient-to-br from-[#b8e6d9] via-[#d4f1e8] to-[#e8f5e1]">
    <div class="container mx-auto p-8">
      {/* Header */}
      <div class="text-center mb-8">
        <img src="/images/phybsia.png" alt="Phybsia cat" class="mx-auto mb-4" style="max-width:6.25rem;width:100%;display:block;" />
        <h1 class="text-3xl font-bold text-gray-800 mb-2">Session {sessionId}</h1>
        <p class="text-lg text-gray-600">Your training plan is ready!</p>
      </div>

      {
        sessionError && (
          <div class="bg-red-50 border-l-4 border-red-400 p-4 rounded-r mb-6 max-w-2xl mx-auto">
            <p class="text-red-600">Error loading session: {sessionError}</p>
          </div>
        )
      }

      {
        trainingSession ? (
          <div class="max-w-7xl mx-auto">
            <TrainingPlanDisplay client:load trainingPlan={trainingSession.training_plan} exerciseImagesMap={exerciseImagesMap} />

            {/* Feedback Section */}
            <div class="mt-12 bg-white rounded-2xl p-6 shadow-[0_8px_30px_rgb(0,0,0,0.08)] max-w-2xl mx-auto">
              <h3 class="text-xl font-bold text-gray-800 mb-4 text-center">How was your session?</h3>
              <FeedbackRating client:load sessionId={sessionId} />
            </div>
          </div>
        ) : (
          <div class="bg-white rounded-2xl p-8 shadow-[0_8px_30px_rgb(0,0,0,0.08)] max-w-2xl mx-auto text-center">
            <p class="text-red-600">No training plan found for this session.</p>
          </div>
        )
      }

      {/* Navigation */}
      <div class="text-center mt-8">
        <a
          href="/body-parts"
          class="inline-flex items-center px-6 py-3 bg-white text-[#14a49b] font-medium rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200"
        >
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
          </svg>
          Back to start
        </a>
      </div>
    </div>
  </div>
</Layout>
