---
import { FeedbackRating } from "@/components/session/FeedbackRating";
import Layout from "@/layouts/Layout.astro";
import type { TrainingPlan } from "@/lib/services/training-plan";

export const prerender = false;
// Server-side guard: require authenticated session and disclaimer acceptance
const authRes = await Astro.locals.supabase.auth.getSession();
const session = authRes.data.session;
if (!session) {
  return Astro.redirect("/login");
}
if (!session.user.user_metadata?.disclaimer_accepted_at) {
  return Astro.redirect("/body-parts");
}

// Grab the session_id from the route params
const sessionId = Number(Astro.params.session_id);
const pageTitle = `Session ${sessionId}`;
// Initialize session data variables
let sessionError: string | null = null;
let trainingSession: { training_plan: TrainingPlan } | null = null;

// Fetch session details for the authenticated user
const supabase = Astro.locals.supabase;
const { data: sessionRow, error: fetchError } = await supabase
  .from("sessions")
  .select("training_plan")
  .eq("id", sessionId)
  .eq("user_id", session.user.id)
  .single();
if (fetchError || !sessionRow) {
  // Not found or not owned by user
  return Astro.redirect("/sessions");
}
trainingSession = { training_plan: sessionRow.training_plan as TrainingPlan };

// Add exercise image fetching
let exerciseImagesMap: Record<number, { file_path: string; metadata: unknown }[]> = {};
if (trainingSession) {
  const exerciseIds = trainingSession.training_plan.exercises.map((ex) => ex.id);
  const { data: exercisesData, error: exercisesError } = await supabase
    .from("exercises")
    .select("id, exercise_images(file_path, metadata)")
    .in("id", exerciseIds);
  if (!exercisesError && exercisesData) {
    exerciseImagesMap = exercisesData.reduce(
      (acc, item) => {
        acc[item.id] = item.exercise_images;
        return acc;
      },
      {} as Record<number, { file_path: string; metadata: unknown }[]>
    );
  }
}
---

<Layout title={pageTitle}>
  <div class="container drop-shadow-md mx-auto p-8 text-center">
    <img src="/images/phybsia.png" alt="Phybsia cat" class="mx-auto" style="max-width:6.25rem;width:100%;display:block;" />
    <h2 class="text-2xl font-bold mb-4">Session {sessionId} generated successfully!</h2>
    {sessionError && <p class="text-red-600">Error loading session: {sessionError}</p>}
    {
      trainingSession && (
        <>
          <div class="mt-6 text-left">
            <h3 class="text-xl font-semibold" data-testid="session-title">
              {trainingSession.training_plan.title}
            </h3>
            <p class="mb-4" data-testid="session-description">
              {trainingSession.training_plan.description}
            </p>
            {trainingSession.training_plan.exercises.length > 0 ? (
              trainingSession.training_plan.exercises.map((ex: TrainingPlan["exercises"][number]) => (
                <div class="mb-4 p-4 border rounded-lg" style="background-color:#f5fffc;" data-testid={`session-exercise-${ex.id}`}>
                  <h4 class="font-medium">{ex.name}</h4>
                  <p>{ex.description}</p>
                  <p>
                    Sets: {ex.sets}, Reps: {ex.reps}, Rest: {ex.rest_time_seconds}s
                  </p>
                  {ex.notes && <p class="italic text-sm">{ex.notes}</p>}
                  {exerciseImagesMap[ex.id]?.length && (
                    <div class="mt-2 flex flex-wrap">
                      {exerciseImagesMap[ex.id].map((img) => (
                        <img src={img.file_path} alt={ex.name} class="w-32 h-32 object-cover m-1" />
                      ))}
                    </div>
                  )}
                </div>
              ))
            ) : (
              <p class="text-red-600">No exercises found in the training plan.</p>
            )}
          </div>
          <FeedbackRating client:load sessionId={sessionId} />
        </>
      )
    }
    <a href="/body-parts" class="mt-6 inline-block text-[#14a49b] hover:underline">‚Üê Back to start</a>
  </div>
</Layout>
