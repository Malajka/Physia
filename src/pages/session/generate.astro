---
import { SessionGenerationLoading } from "@/components/session/SessionGenerationLoading";
import Layout from "@/layouts/Layout.astro";

// Disable prerendering and enforce server-side guards
export const prerender = false;

// Require authenticated session and disclaimer acceptance
// const authRes = await Astro.locals.supabase.auth.getSession();
// if (!authRes.data.session) {
//   return Astro.redirect("/login");
// }
// if (!authRes.data.session.user.user_metadata?.disclaimer_accepted_at) {
//   return Astro.redirect("/body-parts");
// }

// Parse query parameters
const { searchParams } = new URL(Astro.request.url);
const bodyPartIdParam = searchParams.get("bodyPartId");
const testsParam = searchParams.get("tests");

let bodyPartId: number | undefined;
let tests: { muscle_test_id: number; pain_intensity: number }[] = [];

try {
  // Parse and validate the body part ID
  if (bodyPartIdParam) {
    bodyPartId = parseInt(bodyPartIdParam, 10);
    if (isNaN(bodyPartId)) {
      bodyPartId = undefined;
    }
  }

  // Parse and validate the tests array
  if (testsParam) {
    const decodedTests = decodeURIComponent(testsParam);
    const parsedTests = JSON.parse(decodedTests);
    if (
      Array.isArray(parsedTests) &&
      parsedTests.every(
        (test) =>
          typeof test.muscle_test_id === "number" && typeof test.pain_intensity === "number" && test.pain_intensity >= 0 && test.pain_intensity <= 10
      )
    ) {
      tests = parsedTests;
    }
  }
} catch {
  // Error parsing query parameters - using default values
}

const pageTitle = "Generating Training Plan";
---

<Layout title={pageTitle}>
  <!-- @ts-ignore -->
  <SessionGenerationLoading bodyPartId={bodyPartId || 0} tests={tests} client:load />
</Layout>
