---
// src/pages/sessions/index.astro

export const prerender = false;
import { LinkButton } from "@/components/ui/LinkButton";
import Layout from "@/layouts/Layout.astro";
import type { TrainingPlan } from "@/lib/services/training-plan";

const {
  data: { user },
} = await Astro.locals.supabase.auth.getUser();

// Redirect to login if the user is not authenticated.
if (!user) {
  return Astro.redirect("/login?error=not_authenticated");
}

// Extract the user ID from the secure, verified user object.
const userId = user.id;

// Fetch the user's sessions, including the related body part name.
const { data: sessionsRaw, error: fetchError } = await Astro.locals.supabase
  .from("sessions")
  .select("id, created_at, training_plan, body_parts(name)")
  .eq("user_id", userId)
  .order("created_at", { ascending: false });

// Map each raw row into a typed session object with a `plan` property.
// This logic is correct and remains unchanged.
interface SessionRow {
  id: number;
  created_at: string;
  training_plan: unknown;
  body_parts: { name: string } | null;
}
interface SessionItem {
  id: number;
  created_at: string;
  plan: TrainingPlan;
  bodyPartName: string;
}
const sessionsTyped: SessionItem[] = ((sessionsRaw ?? []) as SessionRow[]).map((row) => ({
  id: row.id,
  created_at: row.created_at,
  plan: row.training_plan as unknown as TrainingPlan,
  bodyPartName: row.body_parts?.name ?? "",
}));

const pageTitle = "My Exercise Sessions";
---

<Layout title={pageTitle}>
  <div class="container mx-auto p-8">
    <h1 class="text-3xl font-bold mb-8">My Exercise Sessions</h1>

    {
      fetchError && (
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
          <p>Error loading sessions: {fetchError.message}</p>
        </div>
      )
    }

    {
      !sessionsTyped.length ? (
        <div class="bg-blue-50 border border-blue-200 p-6 rounded-lg text-center">
          <h2 class="text-2xl font-bold text-[var(--foreground)] mb-8">No sessions yet</h2>
          <p class="text-xl text-[var(--foreground)] mb-8">Start by creating your first personalized exercise plan!</p>
          <LinkButton href="/body-parts" variant="nav-primary" data-testid="create-first-session">
            Create New Session
          </LinkButton>
        </div>
      ) : (
        <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {sessionsTyped.map((session) => (
            <div class="bg-white border rounded-lg shadow-sm hover:shadow-md transition-shadow p-4" data-testid={`session-item-${session.id}`}>
              <div class="flex justify-between items-start mb-2">
                <h3 class="font-semibold text-lg">{session.plan.title || `Session for ${session.bodyPartName}`}</h3>
                <span class="text-xs text-gray-500">{new Date(session.created_at).toLocaleDateString()}</span>
              </div>
              <p class="text-sm text-gray-600 mb-4 line-clamp-2">{session.plan.description || "Personalized exercise plan"}</p>
              <a
                href={`/sessions/${session.id}`}
                class="text-[#14a49b] hover:underline text-sm font-medium"
                data-testid={`session-details-link-${session.id}`}
              >
                View Details â†’
              </a>
            </div>
          ))}
        </div>
      )
    }
  </div>
</Layout>
