name: Deploy to Cloudflare Pages

# Workflow triggers
on:
  # Manual trigger from GitHub UI
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: false
        default: "production"
        type: choice
        options:
          - production

# Permissions for GITHUB_TOKEN (minimal permissions)
permissions:
  contents: read

# Environment variables
env:
  NODE_ENV: production
  CI: true
  NODE_VERSION: "22.14.0"

jobs:
  # Job for linting and formatting
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    outputs:
      lint-success: ${{ steps.lint-step.outcome == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Clean install environment
        run: rm -rf node_modules

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        id: lint-step
        run: npm run lint

  # Job for TypeScript checking
  typecheck:
    name: TypeScript Check
    runs-on: ubuntu-latest
    needs: lint
    if: needs.lint.outputs.lint-success == 'true'
    outputs:
      typecheck-success: ${{ steps.typecheck-step.outcome == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Astro types
        run: npx astro sync

      - name: Generate TypeScript types
        run: npx tsc --declaration --emitDeclarationOnly --skipLibCheck

      - name: TypeScript check
        id: typecheck-step
        run: npx tsc --noEmit

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint, typecheck]
    if: needs.lint.outputs.lint-success == 'true' && needs.typecheck.outputs.typecheck-success == 'true'
    outputs:
      unit-test-success: ${{ steps.unit-test-step.outcome == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Clean npm cache and node_modules
        run: |
          npm cache clean --force
          rm -rf node_modules package-lock.json

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        id: unit-test-step
        run: npm run test:unit

  build-and-deploy:
    name: Build and Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: [lint, typecheck, unit-tests]
    if: needs.lint.outputs.lint-success == 'true' && needs.typecheck.outputs.typecheck-success == 'true' && needs.unit-tests.outputs.unit-test-success == 'true'

    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_PUBLIC_KEY: ${{ secrets.SUPABASE_PUBLIC_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Astro types
        run: npx astro sync

      - name: Build for Cloudflare Pages
        run: npm run build:cloudflare

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=${{ secrets.CLOUDFLARE_PROJECT_NAME }} --compatibility-date=2024-12-01

  deployment-status:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [lint, typecheck, unit-tests, build-and-deploy]
    if: always()

    steps:
      - name: Report deployment status
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Linting** | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **TypeScript Check** | ${{ needs.typecheck.result == 'success' && '✅ Passed' || needs.typecheck.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Unit Tests** | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || needs.unit-tests.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deployment** | ${{ needs.build-and-deploy.result == 'success' && '✅ Deployed Successfully' || needs.build-and-deploy.result == 'failure' && '❌ Deployment Failed' || '⏭️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.build-and-deploy.result }}" == "success" ]]; then
            echo "🎉 **Application deployed successfully to Cloudflare Pages!**" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.build-and-deploy.result }}" == "failure" ]]; then
            echo "⚠️ **Deployment failed.** Please check the logs above." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Deployment was skipped due to failed tests.**" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Deployment completed at: $(date)*" >> $GITHUB_STEP_SUMMARY
